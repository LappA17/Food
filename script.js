/* 1) Реализовать функционал, что после заполнения формы и нажатия кнопки "Подтвердить" - 
новый фильм добавляется в список. Страница не должна перезагружаться.
Новый фильм должен добавляться в movieDB.movies.
Для получения доступа к значению input - обращаемся к нему как input.value;
P.S. Здесь есть несколько вариантов решения задачи, принимается любой, но рабочий.
2) Если название фильма больше, чем 21 символ - обрезать его и добавить три точки
3) При клике на мусорную корзину - элемент будет удаляться из списка (сложно)
4) Если в форме стоит галочка "Сделать любимым" - в консоль вывести сообщение: 
"Добавляем любимый фильм"
5) Фильмы должны быть отсортированы по алфавиту */
'use strict';

document.addEventListener("DOMContentLoaded", () =>{
/* Оборачивает весь код в жс в колббек ф-цию и теперь ВЕСЬ КОД КОТОРЫЙ РАСПОЛОЖЕН НИЖЕ СРАБОТАЕТ ТОЛЬКО
ТОГДА КОГДА ДОМ СТРУКТУРА БУДЕТ ЗАГРУЖЕНА*/
const movieDB = {
    movies: [
        "Логан",
        "Лига справедливости",
        "Ла-ла лэнд",
        "Одержимость",
        "Скотт Пилигрим против..."
    ]
};

const adv = document.querySelectorAll('.promo__adv img'),
      poster = document.querySelector('.promo__bg'),
      genre = poster.querySelector('.promo__genre'),
      movieList = document.querySelector('.promo__interactive-list');

adv.forEach(item => {
    item.remove();
});

genre.textContent = 'драма';

poster.style.backgroundImage = 'url("img/bg.jpg")';

movieList.innerHTML = "";

movieDB.movies.sort();

movieDB.movies.forEach((film, i) => {
    movieList.innerHTML += `
        <li class="promo__interactive-item">${i + 1} ${film}
            <div class="delete"></div>
        </li>
    `;
});

const addForm = document.querySelector("form.add"),//форма с классом ад
      addInput = add.form.querySelector(".adding__input"),
      checkbox = add.form.querySelector('[type="checkbox"]');
      //чекбокс что бы было где поставить галочку, в [] ищут тег хтмл

addForm.addEventListener("submit", (event) => {
event.preventDefault();

let newFilm = addInput.value; //лет потому что в ф-ции где 21 символ мы меняем ньюфилм
const favorite = checkbox.checked;
//уже все закончили но из-за того что при вводе пустых строк нам в базу данных бросает 1,2,3,4
// то нужно немного доизменить, а value изначально содержит пустую строку, а пустая строка это
//один из 5 варинтов которые дает нам false
if (newFilm){

    if(newFilm.length > 21) { // на количество символов
        newFilm = `${newFilm.substring(0, 22)}...`
    }
    /*раскрываем интерпаляцию и обращаемся к старому значению ньюФилм, задаем метод сабстринг и 
    говорим что я хочу вырезать с 0 по 22 позицию(невключая), а троеточия поставили что бы если
    клиент ввел больше 21 символа, то после 21 символа будет идти троеточие, интерпаляция умная
    и понимает */

    if(favorite) {
        console.log("Добавляем любимый фильм");
    }
    /* если галочка отмечена то действие тру и добавляется любимый фильм */

    movieDB.movies.push(newFilm);
    sortArr(movieDB.movies);
    createMovieList(movieDB.movies, movieList);
}
event.target.reset();


//movieDB.movies.push(newFilm); Изначально было, но потом перенесли в if выше
//movieDB.movies.sort (); - это стояло здесь изначально, но потом как я сделал ф-цию соритровки - заменил
//sortArr(movieDB.movies); Изначально было, но потом перенесли в if выше
//теперь по логике если мы записываем новый фильм, то нужно новые данные где-то разместить
/*createMovieList(movieDB.movies, movieList);просто скопировал функцию которую мы создавали ниже
и вставил сюда потому что у нас аргументы не меняются. Изначально было, но потом перенесли в if выше  */
/*addForm.reset () теперь осталось очистить форму что бы из нее все данные исчезли, по этому мы 
обращаемся к 
самоф форме - addForm и вызываем метод reset  - сбросить нашу форму и будет addForm.reset()  */
/*event.target.reset();Перенес по выше к иф  но можно сделать и так потому что мы можем использовать
 объект события
event. Потому что с помощью event.target мы можем напрямую обращаться к элементу на котором
происходят события */
});
/*теперь нужно навести обработчик событий на нашу форму что бы отследить отправку нашей формы 
event - объект события
-когда нам нужно отменить стандартное поведение браузера
const newFilm = addInput если я хочу получить новый фильм я обращаюсь к тому инпоту с которым 
взаимодействовал пользователь и ВОТ ЗДЕСЬ как раз все что ввел пользователь будет отбиватья
в value
checkbox.checked ЗАДАЕМ БУЛИНОВОЕ ЗНАЧЕНИЕ либо тру когда галочка отмечена либо фолс если нет
movieDB.movies.push(newFilm) - благодаря этому мы пушим ответ пользователю в общую базу данных
с фильмами. И теперь просто через запятую будет добавляться в виде строки ответ пользователя
*/

function createMovieList (films, parent) {
    parent.innerHTML = "";
    sortArr(films); //теперь даже после удаление будет сортировка по алфавиту

    films.forEach((film, i) => {
        parent.innerHTML += `
            <li class="promo__interactive-item">${i + 1} ${film}
                <div class="delete"></div>
            </li>
        `;
    });

    document.querySelectorAll(".delete").forEach((btn, i) => {
        btn.addEventListener("click", => {
            btn.parentElement.remove();
            movieDB.movies.splice(i, 1);

            createMovieList(movieDB.movies, movieList); //Когда удаляем элеменет..там продолжение

        });
    });
    /*сейчас будем делать так если пользователь наведет на иконку удалить справа от фильма что бы
    она удалялась
    Используем фор ич что бы перебрать все элементы внутри селектора делит
    Дальше колбек фция , нам понадобавить два аргумента ботон и ай, (корзиночка и нумерация),
    я обращаюсь к каждой корзинке внутри, навешиваю событие Клик и запускаю еще одну функию.
    Батан и обращаем к роди элементу и говорим удалить из страницы и базы данных.
    Сплайс это метод который вырезает элемнет из массива i это номер а 1 это количество которое нужно
    удалить 
     */

    
    /*     createMovieList(movieDB.movies, movieList);
КОГДА УДАЛЯЕМ ЭЛЕМЕНТ ИЗ КОРЗИНЫ ТО ЕГО НОМЕР ПО ПОРЯДКУ НЕ МЕНЯЕТСЯ, УСЛОВНО если фильм
    ла-ла ленд был на 2 месте а на первом был марсианин, то после удаление марсианина лала ленд 
    будет дальше на 2 месте. ЧТО БЫ РЕШИТЬ ЭТУ ПРОБЛЕМУ НУЖНО СДЕЛАТЬ РЕКУРСИЮ - это когда функция
    вызывает сама себя внутри другой функции. 
    Нужно вызвать функцию createMovieList внутри самой себя */
}
    createMovieList(movieDB.movies, movieList);
/* НУЖНО СДЕЛАТЬ ФУНКЦИЮ ПОЛНОСТЬЮ НЕЗАВИСИМОЙ, ЧТО БЫ ОНА ВЫЗЫВАЛАСЬ И ТОЛЬКО НА МОМЕНТ ВЫЗОВА
ПОНИМАЛА С ЧЕМ ОНА БУДЕТ РАБОТАТЬ, ДЛЯ ЭТОГО ЕСТЬ АРГУМЕНТЫ :
филмс = фильмы с которыми ф-ция будет рабоать
перент = какой родительский блок странички будет исопльзовать все эти фильмы
    parent.innerHTML = "";  = мы говорим какой родительский блок мы будем зачищать
    parent.innerHTML += ` = а это в какой будем помещать
ТАКИМ ОБРАЗОМ МЫ ПОДХОДИМ К КЛАССИЧЕСКОМУ ПРОГРАММИРОВАНИЮ : КОГДА МЫ ОТХОДИМ ОТ ЖЕСТКО ЗАДАННЫХ
ЭЛЕМЕНТОВ И ЗАДАЕМ ИХ ТОГДА КОГДА ФУНКЦИИ НУЖНО ЕГО ВЫПОЛНИТЬ, А НЕ ПРОСТО ПОСТОЯННО ПОВТОРЯТЬ

createMovieList(movieDB.movies, movieList); - во внутрь передаем 1) аргумент - фильмы которые будем 
перебирать и 2) аргумент - это место кудам мы будем их помещать
*/
adv.forEach(item => {
    item.remove();
}); // теперь вместо этого что стоит в начале , создадим функцию что бы удалить рекламу

const deleteAdv = (arr) =>
arr.forEach(item => {
    item.remove();
});
deleteAdv(adv);
/* вместо Adv ставим какой-то аргумент(arr), что бы отходить от привязывание к ее изначальной константы
который будет определяться только в момент вызова функции*/
genre.textContent = 'драма';

poster.style.backgroundImage = 'url("img/bg.jpg")';//теперь объеденим эти два действия

const makeChanges = () => {
    genre.textContent = 'драма';
    poster.style.backgroundImage = 'url("img/bg.jpg")';
}
makeChanges()
// здесь все более или мене понятно и просто, создать конст, попустить колбек ф-цию, вставвить и объвить

const sortArr = (arr) => {
    arr.sort
}
/*sortArr(movieDB.movies); - изначально был здесь но в самом конце иван перенес это в 
createMovieList потому что после того как пользователь удаляет фильм из сайта, сортирофка по 
алфавиту ломается */
/* создаем переменную sortArr , она будет принимать в себя какой-то массив 
благодрая тому что мы это задали в функции мы ее можем нескольк раз уже повторить*/
})
