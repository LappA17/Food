const arr = [1, 2, 3, 6, 8];
arr.pop ();
//метод поп удаляет последний эллемент нашего массива

arr.push(10)
//метод пуш добавляет эллемент в массив

/* ! работать с концом массива намного проще чем с началом, потому что если мы в начало массива 
вставим что-то то у всех последующих массивов нарушаться индаксы. Условно сейчас у 1 индекс 0,
у 2=1 . 3=2 . 6=4 */

for (let i = 0; i < arr.length, i++) {
    console.log(arr[i])
}
/* этот цикл будет отрабатывать до тех пор пока есть елементы внутри массива
    console.log(arr[i]) используется потому что что бы обратиться к определенному елементу массива
    нужно поставить скобки и указать индекс,  так как индекс 0 мы обращаемся к первому , потом ай на 1 
    поднимается и мы обращаеся к второму и тд */

   const arr = [1, 2, 3, 6, 8];
    for (let value of arr ) {
        console.log(value)
    }
    /*внутри фор оф мы задаем переменную которая будет отображать каждый отдельный эллемент внутри этого ма-
    ссива. Это название может быть абсолютно рандомным после of указываем массив в котором будет работать
    [Running] node "/Users/Ruslan/Desktop/Work/Project/tempCodeRunnerFile.js"
1
2
3
6
8
Работает только с массивом */

const arr = [1, 2, 3, 6, 8];
console.log(arr.length)
/* [Running] node "/Users/Ruslan/Desktop/Work/Project/tempCodeRunnerFile.js"
5 
помни что счет начинается с 0 но при этом массив считает последний эллемент который идет типа после 8*/

const arr = [1, 2, 3, 6, 8];
arr [99] = 0
console.log(arr.length);

/* arr [99] = 0 таким образом мы поместили на 99 позицию инлекс 0
[Running] node "/Users/Ruslan/Desktop/Work/Project/tempCodeRunnerFile.js"
100
вот из этого првило расскрывается что свойсвто ленгтх состоит из последнего индекса +1*/

const arr = [2, 3, 6, 8, 10];
arr.forEach(function(item, i, arr) {
    console.log(`${i}: ${item} внутри массива ${arr}`);
}) 

/*метод позволяет перебрать эллементы внутри массива , но он принимает в себя свойство метода коллбек
функции 
эта фнция будет применятся для каждго эллемента массива
мы ее можем очень гибко настроить, она может принимать 3 аргумента

1) АРГУМЕНТ ЭТО АРГУМЕНТ КОТОРЫЙ МЫ СООБСТВЕННО ПЕРЕБЕРАЕМ (1,2,3,6 ИЛИ 8)
назвать аргумент внутри первый() можно абсолютно как угодно

2) АРГУМЕНТ в переменой после айтем нужно задать номер по порядку в пере-
менную i например (0, 1, 2 и тд любой индекс) 

3) аргумент это обычная ссылка на функцию к которой мы будем обращаться

если вывести в консоль то будет : 
0: 2 внутри массива 2,3,6,8,10
1: 3 внутри массива 2,3,6,8,10
2: 6 внутри массива 2,3,6,8,10
3: 8 внутри массива 2,3,6,8,10
4: 10 внутри массива 2,3,6,8,10 

ОБЫЧНО во всех подобных случаях используют фор ич , но у фор оф есть возможность
break and continue      */

const str = prompt("", "");
const products = str.split(",");
console.log(products)
/* МЕТОД СПЛИТ 
в скобках сплита нужно указать какой будет разделитель товара в строке , условно 
запятая или точка с запятой и так далее
в ВС коде из-за промпт мы такой код запустить на сможем, только в браузере
и в браузере через запятую мы вводим товар, это значит что мы получим массив из той строки
которую пользователь введет в браузере*/

const str = prompt("", "");
const products = str.split(",");
console.log(products.join ("; "));
/* благодрая join мы объеденям эллементы массива, а в скобках джоин показать через какой эллемент
будет разделитель массива
То-есть сначала благодрая сплит мы получили массив через запятую , а потом благодаря джоин обратно
склеили в строку только через ;*/

const str = prompt("", "");
const products = str.split(",");
products.sort();
console.log(products.join ("; "));
/* МЕТОД СОРТ
Он всегда сортирует эллементы внутри массива как строки по алфавиту
но если массив будет с цифрами условно*/
const arr = [2, 13, 26, 18, 10];
arr.sort();
console.log(arr)
/* [Running] node "/Users/Ruslan/Desktop/Work/Project/tempCodeRunnerFile.js"
[ 10, 13, 18, 2, 26 ] 
такое получается потому сортирурирется как строки, по этому везде где старт с 1 будет
первее, дальше 2 потому что больше чем единичка , потом 26 :) */

const arr = [2, 13, 26, 18, 10];
arr.sort(compareNum);
console.log(arr)

function compareNum(a, b) {
    return a - b
}
/* в сорт мы не вызываем функцию а просто передаем как название 
а сама функция просто возвращает а минус б 
[ 2, 10, 13, 18, 26 ]
*/

/* ПСЕВДО МАССИВЫ 
ВСЕ ПОЛНОСТЬЮ РОВНО ТАК ЖЕ КАК В ОБЫЧНОМ МАССИВЕ ТОЛЬКО У ПСЕВДО НЕТ НИКАКИХ МЕТОДОВ , НЕ ФОР ИЧ
НЕ ФОР ОФ, НИЧЕГО. ЭТО ПРОСТРО СТРУКТУРА КОТОРАЯ ХРАНИТ ДАННЫЕ ПО ПОРЯДКУ*/