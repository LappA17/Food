//что бы запрашивать данные, постить данные и другие опперации. И что бы все это происходило асинхроно без перезагрузки страницы нам нужна технология AJAX

// У Вани на сайте конвертор валют
/*ТАК ЖЕ ЕСТЬ ФАЙЛ current.json 
{
    "current": {
        "usd": 74
    }
}*/

const inputRub = document.querySelector("#rub"),
      inputUSD = document.querySelector("#usd");

//дальше нам нужно реализовать такое поведение что после того как мы будем что-то вводит в инпут с рублем, на основание запроса от сервера (смотря какоя курс валюты), нам будет показываться результат в usd

inputRub.addEventListener("input", () => { //так же есть обработчик события помимо клика и инпута change . Change отличается тем что когда ты что-то вводишь в этот инпут с рублем например, отводишь от этого инпута мышку и нажимаешь где-то на странице, то оно автоматически перелючится на инпут с usd 
//A input  - это когда что-то вводится или удаляется внутри инпута
    const request = new XMLHttpRequest(); //это большой объект который находится в браузере, а синтаксис с new - это конструктор который создает новый объект

    request.open ("GET", "Main/current.json");
    //request.open (method, url, async, login, pass);//это метод НЕ открывает соединение между фронтендом и бекендом, а лишь собирает настройки которые в будущем помогут сделать запрос 
/* первый метод open - method - этот тот который используется для запроса (ДВА САМЫХ ПОПУЛЯРНЫХ http метода : get, post). Мы можем послать запрос на сервер, в нашем случае это curren.json и спросить какой сейчас курс валют, или если это интернет-магазин то какие товары есть сейчас в наличие. Записывается он в верхнем регистре, а  именно вот так request.open("GET")

url - путь к нашему серверу. Это куда мы будем поссылать наши запросы
request.open ("GET", "Main/current.json")

async - асинхроность (здесь нужно вспомнить разницу между синхронным и асинхронным кодом. Синхронный код  - это когда операции происходят по порядку, если какой-то код сейчас выполняется то остальной будет его ждать) 
Когда мы посылаем запрос на сервер то это асинхроный код, мы не знаем как долго он будет выполняться */

//существуют HTTP заголовки, благодаря которым мы можем передавать на сервер информацию что именно мы хотим отправить или получить, к примеру это JSON файл или изображение, и так далее

request.setRequestHeader("Content-type", "application/json; charset=UTF-8"); //это заголовок для передачи  json файла
request.send();//метод который запускает запрос на сервер. Метод send меняется от типа запроса, будет то GET или POST(например post  имеет body , то-есть send(body))

//Теперь разберем свойсвта этих методов
/* 1) status (это 404 ошибка, или 300, их там очень много и можно найти на википедии. 200 -  ЭТО ХОРОШО )
   2) statusText (текстовое описание ответа от сервера, условно Окей или но фаунд и тд)
   3) response (очень важное свойство, переводится как ОТВЕТ от сервера, тот ответ что нам отдал бекендРазраб) 
   4) readyState (будет иметь 5 разных фариантоа от 0 до 4. Каждый номер имеет свое значение но нас больше всего интересует номер 4 - DONE когда опперация полностью завершена) */

request.addEventListener("readystatechange", () => {
    if(request.readyState === 4  && request.status === 200) {// 200 = хорошо

        console.log(request.response);// если readyState нашего реквеста равен 4 значит done и реквест статус 200 = значит нет ошибок, то мы выводим в консоль наш ответ от сервера

        const data = JSON.parse(request.response); // сюда мы получим в data обычный javascript объект который мы уже можем использовать, после того как пользователь на сайте оставим какие-то данные относительно курса рубля или доллара, к примеру

        inputUSD.value = +inputRub.value / data.current.usd//теперь нужно рассчитать курс волют на основание того что у нас пришло от сервера и от того что вел пользователь. Первое, мы вводим то что получилось в inputusd , потом мы контролируем его value и нам нужно взять и прировнять его инпуту Рубля и value  разделеное от ответа пользователю, который мы поместили в data. Важно : ответ от пользователя нам приходит в объекте, который имеет два свойства , по этому прописываем так  что бы дойти до коурса валюты data.current.usd
        /* "current": {
            "usd": 74
        } 
        
        (inputUSD.value = +inputRub.value / data.current.usd)toFixed(2) - toFixed это метод который не дает конвертору валют вести больше значение после точки чем две цифры , условно числа p = 3,14, вот так будет пользователю показывать конвертацию валюты а не 3,14149149194914 и тд
        
        ЭТО ВСЁ БЫЛО СОБЫТИЕ readystatechange И ОНО ИСПОЛЬЗУЕТСЯ РЕДКО*/

    }  else { // нужно помнить что сервера иногда ломается и в таких случаях нужно показывать что произошло, никогда нельзя оставлять пользователя в невединее, нужно всегда его оповещать

        inputUSD.value = "Что-то пошло не так";
    }

});
/* readystatechange - это событие отслеживаем статус готовности нашего запроса в данный текущий момент, ведь мы не можем знать через какое время ответит сервер. Это событие следит за readyState

метод GET работает спокойно на лайсервере vs code , но ПОСТ запросы уже только на локальном сервере*/

// ЧАЩЕ ВСЕГО ИСПОЛЬЗУЕТСЯ СОБЫТИЕ load а не readystatechange . И load проще потому что оно срабатывает только один раз , когда запрос уже полностью готов. Это не значит что все хорошо работает

if (request.status === 200) {

    const data = JSON.parse(request.response); 

    (inputUSD.value = +inputRub.value / data.current.usd)toFixed(2);
});
//Вот такой код будет ровно так же работать как readystatechange