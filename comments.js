/* Бывают пользователи которые годами сидят на старых версиях браузера и не обновляю его

npm install --save-dev @babel/core @babel/cli @babel/preset-env

npm install - уже знаем, это установка пакетом

--save-dev - значит что он мне понадобится только на этапе разработки, он прогонит наш код, использует те
    свои возможности, которые нам нужны и уже отдаст нам готовый продукт
    
@babel/core - значит что все элементы относятся к определенному пакету бейби и что бы мы могли
    вытаскивать то что нам нужно мы прописываем через /
    
core - это то что будем прогонять наш код
cli - команды
preset-env - САМОЕ ИНТЕРЕСНОЕ, бейбел очень объемной ресурс и его можно строить под многие задачи и 
    для того что бы нам каждый раз не собирать все настройки в ручную, создаются так называемые 
    ресеты. Ресеты - это те настройки, которые будут использоваться в нашем пакете, на сайте они
    все показываютс их там много: env, react, stage и тд. И env самый популярный
    
Polyfill - содержатся все дополнительные кусочки нашего кода, которые понадобятся для имулирование старых 
    вариантов в новом формате. Полифил идет --save  потому что Полифил уже включается во внутрь готового
    продукта
    
Настраиваем babel внутри webpack

 Targets : это браузеры опеределенных версий
 
 "browserslist": [
    "> 1%"
  ], В РУЧНУЮ ЭТО ПРОПИСАЛИ, ЗНАЧИТ БРАУЗЕР ГДЕ ПРОЦЕНТ ИСПОЛЬЗОВАНИЯ БОЛЬШЕ 1 ПРОЦЕНТА
  
  /\.m?js$/ = находим джсные файлы
  exclude = папки исключения 

  loader - связывает webpack с babelем и сразу прописываем npm i --save-dev babel-loader

  options: опции которые будем использовать, первое - это пресет за который я уже писал выше, но 
    внутри мы можем его еще сильнее настроить:
    debug - включаем, что бы видеть во время процесса что там происходит, какие могут быть проблемы 
        и тд

    corejs - еще одна библиотка, которая включает Полифилы. У НЕЕ ЕСТЬ ОДНА ОЧЕНЬ И ОЧЕНЬ ПОЛЕЗНАЯ 
        ВОЗМОЖНОСТЬ: КОГДА МЫ ПОДКЛЮЧАЕМ К ПРОЕКТУ КАКОЙ-ТО БОЛЬШОЙ БАНДЕЛ ПОЛИФИЛОВ, ЭТО ЗНАЧИТ
        ЧТО МЫ ПОДКЛЮЧАЕМ СРАЗУ ВСЕ, ВНЕЗАВИСИМОСТИ КАКИЕ ТАМ ВОЗМОЖНОСТИ ИСПОЛЬЗУЮТСЯ, ПРОСТО ДОБАВИЛИ
        И ЗАБЫЛИ ЗА ЭТО
    
    useBuiltIns: "usage" - позволяет выбрать те полифилы которые нам нужны

    npm i --save-dev core-js  - устанавливает коре.джс

    КАК ВРУЧНУЮ УСТАНАВЛИВАТЬ ПОЛИФИЛЫ ?
    заходим на https://www.npmjs.com/package/es6-promise
    копируем npm install es6-promise и устанавливаем
    Тепреь этот Полифил необходимо настроить
    копируем require('es6-promise').polyfill() и устанавливаем а начала скрипт.жс перед импортами

    Теперь представим что у нас с промисами все хорошо, но не работает forEach внутри интернет-эксплоера:
    node list foreach polyfill я просто гуглю, захожу на тот же сайт, 
    копирую команду : npm i nodelist-foreach-polyfill и уже в терминал вставляем(я так и не понял почему
        промисы вставили в скрипт жс а эту в терминал)
        
    import 'nodelist-foreach-polyfill'; - самое интересное это ИМПОРТ. Вставляем эту команду в скрипте жс.
        Что значит эта команда и эта особенность? Ведь сейчас я пытаюсь импортировать файлик которого просто
        нет. ЭТО ОЧЕНЬ ВАЖНО ! Когда мы какие-то скрипты и npm пакеты устанавливаем во внутрь нашего проекта,
         они заносятся в папку node_modules ! И так как внутри node_nodules у нас лежат все эти скрипты,
         все библиотеки и все что нам нужно, то почему нам просто не брать их оттуда и не импортировать
         во внутрь наших скриптов. Так и происходит с этим полифилом, ведь внутр него всего несколько строк
         кода. ПРЕДСТАВЬ ты хочешь скачать slick-slider , то проще и правельнее скачать его через npm
          и потом просто на первой страницы script js его импортировать. Преимущество в том что в конце
         получится один jsный файл который и будет содержать все зависимости



    */
